#include <workspace/workspace.hpp>

#include <bandit/bandit.h>

#include <benchmark.hpp>

#include <fmt/format.h>

using namespace snowhouse;
using namespace bandit;

go_bandit([]{
    describe("WorkspaceFormat", []{
        benchmark_it("[serialize empty workspace]", [&]{
            Workspace workspace("test workspace");

            const std::vector<std::uint8_t> expected = {
                0xA2, 0x64, 0x6E, 0x61, 0x6D, 0x65, 0x6E, 0x74,
                0x65, 0x73, 0x74, 0x20, 0x77, 0x6F, 0x72, 0x6B,
                0x73, 0x70, 0x61, 0x63, 0x65, 0x6D, 0x72, 0x65,
                0x71, 0x75, 0x65, 0x73, 0x74, 0x67, 0x72, 0x6F,
                0x75, 0x70, 0x73, 0x80,
            };

            AssertThat(workspace.serialize(), Equals(expected));
        });

        benchmark_it("[serialize workspace with empty request groups]", [&]{
            Workspace workspace("test workspace");
            workspace.addRequestGroup(Workspace::RequestGroup("group 1"));
            workspace.addRequestGroup(Workspace::RequestGroup("group 2"));

            const std::vector<std::uint8_t> expected = {
                0xA2, 0x64, 0x6E, 0x61, 0x6D, 0x65, 0x6E, 0x74,
                0x65, 0x73, 0x74, 0x20, 0x77, 0x6F, 0x72, 0x6B,
                0x73, 0x70, 0x61, 0x63, 0x65, 0x6D, 0x72, 0x65,
                0x71, 0x75, 0x65, 0x73, 0x74, 0x67, 0x72, 0x6F,
                0x75, 0x70, 0x73, 0x82, 0xA2, 0x64, 0x6E, 0x61,
                0x6D, 0x65, 0x67, 0x67, 0x72, 0x6F, 0x75, 0x70,
                0x20, 0x31, 0x68, 0x72, 0x65, 0x71, 0x75, 0x65,
                0x73, 0x74, 0x73, 0x80, 0xA2, 0x64, 0x6E, 0x61,
                0x6D, 0x65, 0x67, 0x67, 0x72, 0x6F, 0x75, 0x70,
                0x20, 0x32, 0x68, 0x72, 0x65, 0x71, 0x75, 0x65,
                0x73, 0x74, 0x73, 0x80,
            };

            AssertThat(workspace.serialize(), Equals(expected));
        });

        benchmark_it("[serialize workspace with data]", [&]{
            Workspace workspace("test workspace");

            Workspace::RequestGroup g1("group 1");
            g1.addRequest(Workspace::Request("req 1", "http://localhost"));
            workspace.addRequestGroup(g1);

            Workspace::RequestGroup g2("group 2");
            g2.addRequest(Workspace::Request("req 1", "http://127.0.0.1/v1/api"));
            g2.addRequest(Workspace::Request("req 2", "http://127.0.0.1/v2/api"));
            workspace.addRequestGroup(g2);

            const std::vector<std::uint8_t> expected = {
                0xA2, 0x64, 0x6E, 0x61, 0x6D, 0x65, 0x6E, 0x74,
                0x65, 0x73, 0x74, 0x20, 0x77, 0x6F, 0x72, 0x6B,
                0x73, 0x70, 0x61, 0x63, 0x65, 0x6D, 0x72, 0x65,
                0x71, 0x75, 0x65, 0x73, 0x74, 0x67, 0x72, 0x6F,
                0x75, 0x70, 0x73, 0x82, 0xA2, 0x64, 0x6E, 0x61,
                0x6D, 0x65, 0x67, 0x67, 0x72, 0x6F, 0x75, 0x70,
                0x20, 0x31, 0x68, 0x72, 0x65, 0x71, 0x75, 0x65,
                0x73, 0x74, 0x73, 0x81, 0xA2, 0x64, 0x6E, 0x61,
                0x6D, 0x65, 0x65, 0x72, 0x65, 0x71, 0x20, 0x31,
                0x63, 0x75, 0x72, 0x6C, 0x70, 0x68, 0x74, 0x74,
                0x70, 0x3A, 0x2F, 0x2F, 0x6C, 0x6F, 0x63, 0x61,
                0x6C, 0x68, 0x6F, 0x73, 0x74, 0xA2, 0x64, 0x6E,
                0x61, 0x6D, 0x65, 0x67, 0x67, 0x72, 0x6F, 0x75,
                0x70, 0x20, 0x32, 0x68, 0x72, 0x65, 0x71, 0x75,
                0x65, 0x73, 0x74, 0x73, 0x82, 0xA2, 0x64, 0x6E,
                0x61, 0x6D, 0x65, 0x65, 0x72, 0x65, 0x71, 0x20,
                0x31, 0x63, 0x75, 0x72, 0x6C, 0x77, 0x68, 0x74,
                0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x31, 0x32, 0x37,
                0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x31, 0x2F, 0x76,
                0x31, 0x2F, 0x61, 0x70, 0x69, 0xA2, 0x64, 0x6E,
                0x61, 0x6D, 0x65, 0x65, 0x72, 0x65, 0x71, 0x20,
                0x32, 0x63, 0x75, 0x72, 0x6C, 0x77, 0x68, 0x74,
                0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x31, 0x32, 0x37,
                0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x31, 0x2F, 0x76,
                0x32, 0x2F, 0x61, 0x70, 0x69,
            };

            AssertThat(workspace.serialize(), Equals(expected));
        });
    });
});
